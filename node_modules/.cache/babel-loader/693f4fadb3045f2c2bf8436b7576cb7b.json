{"ast":null,"code":"import React, { useEffect } from 'react';\nimport * as THREE from 'three';\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls';\nimport earthMap from './textures/00_earthmap1k.jpg';\nimport earthBumpMap from './textures/01_earthbump1k.jpg';\nimport earthSpecularMap from './textures/02_earthspec1k.jpg';\nimport earthLightsMap from './textures/03_earthlights1k.jpg';\nimport earthCloudMap from './textures/04_earthcloudmap.jpg';\nimport earthCloudTransMap from './textures/05_earthcloudmaptrans.jpg';\nfunction Earth() {\n  useEffect(() => {\n    // Escena, cámara y renderizador\n    const scene = new THREE.Scene();\n    const camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);\n    const renderer = new THREE.WebGLRenderer({\n      antialias: true\n    });\n    renderer.setSize(window.innerWidth, window.innerHeight);\n    renderer.setPixelRatio(window.devicePixelRatio);\n    document.body.appendChild(renderer.domElement);\n\n    // Textura de la Tierra\n    const earthGeometry = new THREE.SphereGeometry(5, 32, 32);\n    const earthMaterial = new THREE.MeshPhongMaterial({\n      map: new THREE.TextureLoader().load(earthMap),\n      bumpMap: new THREE.TextureLoader().load(earthBumpMap),\n      bumpScale: 0.05,\n      specularMap: new THREE.TextureLoader().load(earthSpecularMap),\n      specular: new THREE.Color('grey'),\n      emissiveMap: new THREE.TextureLoader().load(earthLightsMap),\n      emissive: new THREE.Color('white')\n    });\n    const earth = new THREE.Mesh(earthGeometry, earthMaterial);\n    scene.add(earth);\n\n    // Nubes\n    const cloudGeometry = new THREE.SphereGeometry(5.05, 32, 32);\n    const cloudMaterial = new THREE.MeshPhongMaterial({\n      map: new THREE.TextureLoader().load(earthCloudMap),\n      alphaMap: new THREE.TextureLoader().load(earthCloudTransMap),\n      transparent: true,\n      depthWrite: true // Ajuste para evitar la transparencia en el globo terráqueo\n    });\n    const clouds = new THREE.Mesh(cloudGeometry, cloudMaterial);\n    scene.add(clouds);\n\n    // Fondo de estrellas con variación de color\n    const vertexShader = `\n            attribute float size;\n            attribute float alpha;\n            attribute vec3 customColor;\n            varying float vAlpha;\n            varying vec3 vColor;\n            void main() {\n                vAlpha = alpha;\n                vColor = customColor;\n                vec4 mvPosition = modelViewMatrix * vec4(position, 1.0);\n                gl_PointSize = size * (300.0 / -mvPosition.z);\n                gl_Position = projectionMatrix * mvPosition;\n            }\n        `;\n    const fragmentShader = `\n            varying float vAlpha;\n            varying vec3 vColor;\n            void main() {\n                gl_FragColor = vec4(vColor, vAlpha);\n            }\n        `;\n    const starsGeometry = new THREE.BufferGeometry();\n    const starVertices = [];\n    const starSizes = [];\n    const starAlphas = [];\n    const starColors = [];\n    const colors = [new THREE.Color(0xffffff), new THREE.Color(0xffff00), new THREE.Color(0x00ffff), new THREE.Color(0xff00ff)];\n    for (let i = 0; i < 10000; i++) {\n      const x = THREE.MathUtils.randFloatSpread(2000);\n      const y = THREE.MathUtils.randFloatSpread(2000);\n      const z = THREE.MathUtils.randFloatSpread(2000);\n      starVertices.push(x, y, z);\n      starSizes.push(Math.random() * 5 + 1); // Tamaño de las estrellas\n      starAlphas.push(Math.random()); // Transparencia de las estrellas\n      starColors.push(colors[Math.floor(Math.random() * colors.length)].toArray()); // Colores aleatorios\n    }\n    starsGeometry.setAttribute('position', new THREE.Float32BufferAttribute(starVertices, 3));\n    starsGeometry.setAttribute('size', new THREE.Float32BufferAttribute(starSizes, 1));\n    starsGeometry.setAttribute('alpha', new THREE.Float32BufferAttribute(starAlphas, 1));\n    starsGeometry.setAttribute('customColor', new THREE.Float32BufferAttribute(starColors.flat(), 3));\n    const starsMaterial = new THREE.ShaderMaterial({\n      vertexShader,\n      fragmentShader,\n      blending: THREE.AdditiveBlending,\n      depthTest: false,\n      transparent: true\n    });\n    const stars = new THREE.Points(starsGeometry, starsMaterial);\n    scene.add(stars);\n\n    // Iluminación\n    const ambientLight = new THREE.AmbientLight(0x333333);\n    scene.add(ambientLight);\n    const directionalLight = new THREE.DirectionalLight(0xffffff, 1);\n    directionalLight.position.set(5, 3, 5).normalize();\n    scene.add(directionalLight);\n\n    // Controles de órbita\n    const controls = new OrbitControls(camera, renderer.domElement);\n    camera.position.set(0, 0, 15);\n    controls.update();\n\n    // Animación\n    const animate = () => {\n      requestAnimationFrame(animate);\n      earth.rotation.y += 0.001;\n      clouds.rotation.y += 0.001;\n      controls.update();\n\n      // Actualiza las transparencias de las estrellas para el parpadeo\n      const alphas = starsGeometry.attributes.alpha.array;\n      for (let i = 0; i < alphas.length; i++) {\n        alphas[i] = Math.abs(Math.sin(Date.now() * 0.001 + i));\n      }\n      starsGeometry.attributes.alpha.needsUpdate = true;\n      renderer.render(scene, camera);\n    };\n    animate();\n\n    // Limpiar\n    return () => {\n      document.body.removeChild(renderer.domElement);\n    };\n  }, []);\n  return null;\n}\nexport default Earth;","map":{"version":3,"names":["React","useEffect","THREE","OrbitControls","earthMap","earthBumpMap","earthSpecularMap","earthLightsMap","earthCloudMap","earthCloudTransMap","Earth","scene","Scene","camera","PerspectiveCamera","window","innerWidth","innerHeight","renderer","WebGLRenderer","antialias","setSize","setPixelRatio","devicePixelRatio","document","body","appendChild","domElement","earthGeometry","SphereGeometry","earthMaterial","MeshPhongMaterial","map","TextureLoader","load","bumpMap","bumpScale","specularMap","specular","Color","emissiveMap","emissive","earth","Mesh","add","cloudGeometry","cloudMaterial","alphaMap","transparent","depthWrite","clouds","vertexShader","fragmentShader","starsGeometry","BufferGeometry","starVertices","starSizes","starAlphas","starColors","colors","i","x","MathUtils","randFloatSpread","y","z","push","Math","random","floor","length","toArray","setAttribute","Float32BufferAttribute","flat","starsMaterial","ShaderMaterial","blending","AdditiveBlending","depthTest","stars","Points","ambientLight","AmbientLight","directionalLight","DirectionalLight","position","set","normalize","controls","update","animate","requestAnimationFrame","rotation","alphas","attributes","alpha","array","abs","sin","Date","now","needsUpdate","render","removeChild"],"sources":["C:/Users/Ivan/Desktop/billy/src/Earth.js"],"sourcesContent":["import React, { useEffect } from 'react';\r\nimport * as THREE from 'three';\r\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls';\r\nimport earthMap from './textures/00_earthmap1k.jpg';\r\nimport earthBumpMap from './textures/01_earthbump1k.jpg';\r\nimport earthSpecularMap from './textures/02_earthspec1k.jpg';\r\nimport earthLightsMap from './textures/03_earthlights1k.jpg';\r\nimport earthCloudMap from './textures/04_earthcloudmap.jpg';\r\nimport earthCloudTransMap from './textures/05_earthcloudmaptrans.jpg';\r\n\r\nfunction Earth() {\r\n    useEffect(() => {\r\n        // Escena, cámara y renderizador\r\n        const scene = new THREE.Scene();\r\n        const camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);\r\n        const renderer = new THREE.WebGLRenderer({ antialias: true });\r\n        renderer.setSize(window.innerWidth, window.innerHeight);\r\n        renderer.setPixelRatio(window.devicePixelRatio);\r\n        document.body.appendChild(renderer.domElement);\r\n\r\n        // Textura de la Tierra\r\n        const earthGeometry = new THREE.SphereGeometry(5, 32, 32);\r\n        const earthMaterial = new THREE.MeshPhongMaterial({\r\n            map: new THREE.TextureLoader().load(earthMap),\r\n            bumpMap: new THREE.TextureLoader().load(earthBumpMap),\r\n            bumpScale: 0.05,\r\n            specularMap: new THREE.TextureLoader().load(earthSpecularMap),\r\n            specular: new THREE.Color('grey'),\r\n            emissiveMap: new THREE.TextureLoader().load(earthLightsMap),\r\n            emissive: new THREE.Color('white')\r\n        });\r\n\r\n        const earth = new THREE.Mesh(earthGeometry, earthMaterial);\r\n        scene.add(earth);\r\n\r\n        // Nubes\r\n        const cloudGeometry = new THREE.SphereGeometry(5.05, 32, 32);\r\n        const cloudMaterial = new THREE.MeshPhongMaterial({\r\n            map: new THREE.TextureLoader().load(earthCloudMap),\r\n            alphaMap: new THREE.TextureLoader().load(earthCloudTransMap),\r\n            transparent: true,\r\n            depthWrite: true // Ajuste para evitar la transparencia en el globo terráqueo\r\n        });\r\n\r\n        const clouds = new THREE.Mesh(cloudGeometry, cloudMaterial);\r\n        scene.add(clouds);\r\n\r\n        // Fondo de estrellas con variación de color\r\n        const vertexShader = `\r\n            attribute float size;\r\n            attribute float alpha;\r\n            attribute vec3 customColor;\r\n            varying float vAlpha;\r\n            varying vec3 vColor;\r\n            void main() {\r\n                vAlpha = alpha;\r\n                vColor = customColor;\r\n                vec4 mvPosition = modelViewMatrix * vec4(position, 1.0);\r\n                gl_PointSize = size * (300.0 / -mvPosition.z);\r\n                gl_Position = projectionMatrix * mvPosition;\r\n            }\r\n        `;\r\n\r\n        const fragmentShader = `\r\n            varying float vAlpha;\r\n            varying vec3 vColor;\r\n            void main() {\r\n                gl_FragColor = vec4(vColor, vAlpha);\r\n            }\r\n        `;\r\n\r\n        const starsGeometry = new THREE.BufferGeometry();\r\n        const starVertices = [];\r\n        const starSizes = [];\r\n        const starAlphas = [];\r\n        const starColors = [];\r\n        const colors = [new THREE.Color(0xffffff), new THREE.Color(0xffff00), new THREE.Color(0x00ffff), new THREE.Color(0xff00ff)];\r\n\r\n        for (let i = 0; i < 10000; i++) {\r\n            const x = THREE.MathUtils.randFloatSpread(2000);\r\n            const y = THREE.MathUtils.randFloatSpread(2000);\r\n            const z = THREE.MathUtils.randFloatSpread(2000);\r\n\r\n            starVertices.push(x, y, z);\r\n            starSizes.push(Math.random() * 5 + 1); // Tamaño de las estrellas\r\n            starAlphas.push(Math.random()); // Transparencia de las estrellas\r\n            starColors.push(colors[Math.floor(Math.random() * colors.length)].toArray()); // Colores aleatorios\r\n        }\r\n\r\n        starsGeometry.setAttribute('position', new THREE.Float32BufferAttribute(starVertices, 3));\r\n        starsGeometry.setAttribute('size', new THREE.Float32BufferAttribute(starSizes, 1));\r\n        starsGeometry.setAttribute('alpha', new THREE.Float32BufferAttribute(starAlphas, 1));\r\n        starsGeometry.setAttribute('customColor', new THREE.Float32BufferAttribute(starColors.flat(), 3));\r\n\r\n        const starsMaterial = new THREE.ShaderMaterial({\r\n            vertexShader,\r\n            fragmentShader,\r\n            blending: THREE.AdditiveBlending,\r\n            depthTest: false,\r\n            transparent: true\r\n        });\r\n\r\n        const stars = new THREE.Points(starsGeometry, starsMaterial);\r\n        scene.add(stars);\r\n\r\n        // Iluminación\r\n        const ambientLight = new THREE.AmbientLight(0x333333);\r\n        scene.add(ambientLight);\r\n\r\n        const directionalLight = new THREE.DirectionalLight(0xffffff, 1);\r\n        directionalLight.position.set(5, 3, 5).normalize();\r\n        scene.add(directionalLight);\r\n\r\n        // Controles de órbita\r\n        const controls = new OrbitControls(camera, renderer.domElement);\r\n        camera.position.set(0, 0, 15);\r\n        controls.update();\r\n\r\n        // Animación\r\n        const animate = () => {\r\n            requestAnimationFrame(animate);\r\n            earth.rotation.y += 0.001;\r\n            clouds.rotation.y += 0.001;\r\n            controls.update();\r\n\r\n            // Actualiza las transparencias de las estrellas para el parpadeo\r\n            const alphas = starsGeometry.attributes.alpha.array;\r\n            for (let i = 0; i < alphas.length; i++) {\r\n                alphas[i] = Math.abs(Math.sin(Date.now() * 0.001 + i));\r\n            }\r\n            starsGeometry.attributes.alpha.needsUpdate = true;\r\n\r\n            renderer.render(scene, camera);\r\n        };\r\n\r\n        animate();\r\n\r\n        // Limpiar\r\n        return () => {\r\n            document.body.removeChild(renderer.domElement);\r\n        };\r\n    }, []);\r\n\r\n    return null;\r\n}\r\n\r\nexport default Earth;"],"mappings":"AAAA,OAAOA,KAAK,IAAIC,SAAS,QAAQ,OAAO;AACxC,OAAO,KAAKC,KAAK,MAAM,OAAO;AAC9B,SAASC,aAAa,QAAQ,2CAA2C;AACzE,OAAOC,QAAQ,MAAM,8BAA8B;AACnD,OAAOC,YAAY,MAAM,+BAA+B;AACxD,OAAOC,gBAAgB,MAAM,+BAA+B;AAC5D,OAAOC,cAAc,MAAM,iCAAiC;AAC5D,OAAOC,aAAa,MAAM,iCAAiC;AAC3D,OAAOC,kBAAkB,MAAM,sCAAsC;AAErE,SAASC,KAAKA,CAAA,EAAG;EACbT,SAAS,CAAC,MAAM;IACZ;IACA,MAAMU,KAAK,GAAG,IAAIT,KAAK,CAACU,KAAK,CAAC,CAAC;IAC/B,MAAMC,MAAM,GAAG,IAAIX,KAAK,CAACY,iBAAiB,CAAC,EAAE,EAAEC,MAAM,CAACC,UAAU,GAAGD,MAAM,CAACE,WAAW,EAAE,GAAG,EAAE,IAAI,CAAC;IACjG,MAAMC,QAAQ,GAAG,IAAIhB,KAAK,CAACiB,aAAa,CAAC;MAAEC,SAAS,EAAE;IAAK,CAAC,CAAC;IAC7DF,QAAQ,CAACG,OAAO,CAACN,MAAM,CAACC,UAAU,EAAED,MAAM,CAACE,WAAW,CAAC;IACvDC,QAAQ,CAACI,aAAa,CAACP,MAAM,CAACQ,gBAAgB,CAAC;IAC/CC,QAAQ,CAACC,IAAI,CAACC,WAAW,CAACR,QAAQ,CAACS,UAAU,CAAC;;IAE9C;IACA,MAAMC,aAAa,GAAG,IAAI1B,KAAK,CAAC2B,cAAc,CAAC,CAAC,EAAE,EAAE,EAAE,EAAE,CAAC;IACzD,MAAMC,aAAa,GAAG,IAAI5B,KAAK,CAAC6B,iBAAiB,CAAC;MAC9CC,GAAG,EAAE,IAAI9B,KAAK,CAAC+B,aAAa,CAAC,CAAC,CAACC,IAAI,CAAC9B,QAAQ,CAAC;MAC7C+B,OAAO,EAAE,IAAIjC,KAAK,CAAC+B,aAAa,CAAC,CAAC,CAACC,IAAI,CAAC7B,YAAY,CAAC;MACrD+B,SAAS,EAAE,IAAI;MACfC,WAAW,EAAE,IAAInC,KAAK,CAAC+B,aAAa,CAAC,CAAC,CAACC,IAAI,CAAC5B,gBAAgB,CAAC;MAC7DgC,QAAQ,EAAE,IAAIpC,KAAK,CAACqC,KAAK,CAAC,MAAM,CAAC;MACjCC,WAAW,EAAE,IAAItC,KAAK,CAAC+B,aAAa,CAAC,CAAC,CAACC,IAAI,CAAC3B,cAAc,CAAC;MAC3DkC,QAAQ,EAAE,IAAIvC,KAAK,CAACqC,KAAK,CAAC,OAAO;IACrC,CAAC,CAAC;IAEF,MAAMG,KAAK,GAAG,IAAIxC,KAAK,CAACyC,IAAI,CAACf,aAAa,EAAEE,aAAa,CAAC;IAC1DnB,KAAK,CAACiC,GAAG,CAACF,KAAK,CAAC;;IAEhB;IACA,MAAMG,aAAa,GAAG,IAAI3C,KAAK,CAAC2B,cAAc,CAAC,IAAI,EAAE,EAAE,EAAE,EAAE,CAAC;IAC5D,MAAMiB,aAAa,GAAG,IAAI5C,KAAK,CAAC6B,iBAAiB,CAAC;MAC9CC,GAAG,EAAE,IAAI9B,KAAK,CAAC+B,aAAa,CAAC,CAAC,CAACC,IAAI,CAAC1B,aAAa,CAAC;MAClDuC,QAAQ,EAAE,IAAI7C,KAAK,CAAC+B,aAAa,CAAC,CAAC,CAACC,IAAI,CAACzB,kBAAkB,CAAC;MAC5DuC,WAAW,EAAE,IAAI;MACjBC,UAAU,EAAE,IAAI,CAAC;IACrB,CAAC,CAAC;IAEF,MAAMC,MAAM,GAAG,IAAIhD,KAAK,CAACyC,IAAI,CAACE,aAAa,EAAEC,aAAa,CAAC;IAC3DnC,KAAK,CAACiC,GAAG,CAACM,MAAM,CAAC;;IAEjB;IACA,MAAMC,YAAY,GAAG;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;IAED,MAAMC,cAAc,GAAG;AAC/B;AACA;AACA;AACA;AACA;AACA,SAAS;IAED,MAAMC,aAAa,GAAG,IAAInD,KAAK,CAACoD,cAAc,CAAC,CAAC;IAChD,MAAMC,YAAY,GAAG,EAAE;IACvB,MAAMC,SAAS,GAAG,EAAE;IACpB,MAAMC,UAAU,GAAG,EAAE;IACrB,MAAMC,UAAU,GAAG,EAAE;IACrB,MAAMC,MAAM,GAAG,CAAC,IAAIzD,KAAK,CAACqC,KAAK,CAAC,QAAQ,CAAC,EAAE,IAAIrC,KAAK,CAACqC,KAAK,CAAC,QAAQ,CAAC,EAAE,IAAIrC,KAAK,CAACqC,KAAK,CAAC,QAAQ,CAAC,EAAE,IAAIrC,KAAK,CAACqC,KAAK,CAAC,QAAQ,CAAC,CAAC;IAE3H,KAAK,IAAIqB,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,KAAK,EAAEA,CAAC,EAAE,EAAE;MAC5B,MAAMC,CAAC,GAAG3D,KAAK,CAAC4D,SAAS,CAACC,eAAe,CAAC,IAAI,CAAC;MAC/C,MAAMC,CAAC,GAAG9D,KAAK,CAAC4D,SAAS,CAACC,eAAe,CAAC,IAAI,CAAC;MAC/C,MAAME,CAAC,GAAG/D,KAAK,CAAC4D,SAAS,CAACC,eAAe,CAAC,IAAI,CAAC;MAE/CR,YAAY,CAACW,IAAI,CAACL,CAAC,EAAEG,CAAC,EAAEC,CAAC,CAAC;MAC1BT,SAAS,CAACU,IAAI,CAACC,IAAI,CAACC,MAAM,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;MACvCX,UAAU,CAACS,IAAI,CAACC,IAAI,CAACC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC;MAChCV,UAAU,CAACQ,IAAI,CAACP,MAAM,CAACQ,IAAI,CAACE,KAAK,CAACF,IAAI,CAACC,MAAM,CAAC,CAAC,GAAGT,MAAM,CAACW,MAAM,CAAC,CAAC,CAACC,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC;IAClF;IAEAlB,aAAa,CAACmB,YAAY,CAAC,UAAU,EAAE,IAAItE,KAAK,CAACuE,sBAAsB,CAAClB,YAAY,EAAE,CAAC,CAAC,CAAC;IACzFF,aAAa,CAACmB,YAAY,CAAC,MAAM,EAAE,IAAItE,KAAK,CAACuE,sBAAsB,CAACjB,SAAS,EAAE,CAAC,CAAC,CAAC;IAClFH,aAAa,CAACmB,YAAY,CAAC,OAAO,EAAE,IAAItE,KAAK,CAACuE,sBAAsB,CAAChB,UAAU,EAAE,CAAC,CAAC,CAAC;IACpFJ,aAAa,CAACmB,YAAY,CAAC,aAAa,EAAE,IAAItE,KAAK,CAACuE,sBAAsB,CAACf,UAAU,CAACgB,IAAI,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;IAEjG,MAAMC,aAAa,GAAG,IAAIzE,KAAK,CAAC0E,cAAc,CAAC;MAC3CzB,YAAY;MACZC,cAAc;MACdyB,QAAQ,EAAE3E,KAAK,CAAC4E,gBAAgB;MAChCC,SAAS,EAAE,KAAK;MAChB/B,WAAW,EAAE;IACjB,CAAC,CAAC;IAEF,MAAMgC,KAAK,GAAG,IAAI9E,KAAK,CAAC+E,MAAM,CAAC5B,aAAa,EAAEsB,aAAa,CAAC;IAC5DhE,KAAK,CAACiC,GAAG,CAACoC,KAAK,CAAC;;IAEhB;IACA,MAAME,YAAY,GAAG,IAAIhF,KAAK,CAACiF,YAAY,CAAC,QAAQ,CAAC;IACrDxE,KAAK,CAACiC,GAAG,CAACsC,YAAY,CAAC;IAEvB,MAAME,gBAAgB,GAAG,IAAIlF,KAAK,CAACmF,gBAAgB,CAAC,QAAQ,EAAE,CAAC,CAAC;IAChED,gBAAgB,CAACE,QAAQ,CAACC,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAACC,SAAS,CAAC,CAAC;IAClD7E,KAAK,CAACiC,GAAG,CAACwC,gBAAgB,CAAC;;IAE3B;IACA,MAAMK,QAAQ,GAAG,IAAItF,aAAa,CAACU,MAAM,EAAEK,QAAQ,CAACS,UAAU,CAAC;IAC/Dd,MAAM,CAACyE,QAAQ,CAACC,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC;IAC7BE,QAAQ,CAACC,MAAM,CAAC,CAAC;;IAEjB;IACA,MAAMC,OAAO,GAAGA,CAAA,KAAM;MAClBC,qBAAqB,CAACD,OAAO,CAAC;MAC9BjD,KAAK,CAACmD,QAAQ,CAAC7B,CAAC,IAAI,KAAK;MACzBd,MAAM,CAAC2C,QAAQ,CAAC7B,CAAC,IAAI,KAAK;MAC1ByB,QAAQ,CAACC,MAAM,CAAC,CAAC;;MAEjB;MACA,MAAMI,MAAM,GAAGzC,aAAa,CAAC0C,UAAU,CAACC,KAAK,CAACC,KAAK;MACnD,KAAK,IAAIrC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGkC,MAAM,CAACxB,MAAM,EAAEV,CAAC,EAAE,EAAE;QACpCkC,MAAM,CAAClC,CAAC,CAAC,GAAGO,IAAI,CAAC+B,GAAG,CAAC/B,IAAI,CAACgC,GAAG,CAACC,IAAI,CAACC,GAAG,CAAC,CAAC,GAAG,KAAK,GAAGzC,CAAC,CAAC,CAAC;MAC1D;MACAP,aAAa,CAAC0C,UAAU,CAACC,KAAK,CAACM,WAAW,GAAG,IAAI;MAEjDpF,QAAQ,CAACqF,MAAM,CAAC5F,KAAK,EAAEE,MAAM,CAAC;IAClC,CAAC;IAED8E,OAAO,CAAC,CAAC;;IAET;IACA,OAAO,MAAM;MACTnE,QAAQ,CAACC,IAAI,CAAC+E,WAAW,CAACtF,QAAQ,CAACS,UAAU,CAAC;IAClD,CAAC;EACL,CAAC,EAAE,EAAE,CAAC;EAEN,OAAO,IAAI;AACf;AAEA,eAAejB,KAAK","ignoreList":[]},"metadata":{},"sourceType":"module"}